Install Docker :

 sudo apt-get update
 sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
    
 sudo mkdir -p /etc/apt/keyrings
 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
 
  echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  
 sudo apt-get update
 sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
 
 // Verify that Docker Engine is installed correctly by running the hello-world image.

 sudo docker run hello-world 
 
 Next Important step: especially for run docker seperately RootPATH without sudo persmission
 
sudo groupadd docker
sudo usermod -a -G docker $USER // Add your user to the docker group.
newgrp docker
docker run hello-world // WITHOUT sudo run




sudo systemctl start docker : Make sure the docker daemon is running.
//If you want the docker daemon to start when the system starts, use the following:
sudo systemctl enable docker

 // Run the following command to list all of Docker containers that are running on your machine. 

docker ps -a


Run Hyperledger Fabric Using the Fabric test network:
curl -sSL https://bit.ly/2ysbOFE | bash -s // cloning repo
cd fabric-samples/test-network // go the test-network directory

./network.sh  -h //  print the script help text

./network.sh  down //From inside the test-network directory, run the following command to remove any containers or artifacts from any previous runs:

./network.sh up //You can then bring up the network

./network.sh createChannel //create a channel with the default name of mychannel:
./network.sh createChannel -c channel1 // Custom Channel name

./network.sh up createChannel // bring up the network and create a channel in a single step

notes:In Fabric, smart contracts are deployed on the network in packages referred to as chaincode---
After you have used the network.sh to create a channel, you can start a chaincode on the channel using the following command:
./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go -ccl go

notes:The deployCC subcommand will install the asset-transfer (basic) chaincode on peer0.org1.example.com and peer0.org2.example.com and then deploy the chaincode on the channel specified using the channel flag (or mychannel if no channel is specified). If you are deploying a chaincode for the first time, the script will install the chaincode dependencies. You can use the language flag, -ccl, to install the Go, typescript or javascript versions of the chaincode. 


notes:After you bring up the test network, you can use the peer CLI to interact with your network. The peer CLI allows you to invoke deployed smart contracts, update channels, or install and deploy new smart contracts from the CLI.
Use the following command to add those binaries to your CLI Path:
export PATH=${PWD}/../bin:$PATH


You also need to set the FABRIC_CFG_PATH to point to the core.yaml file in the fabric-samples repository:

export FABRIC_CFG_PATH=$PWD/../config/


You can now set the environment variables that allow you to operate the peer CLI as Org1:

# Environment variables for Org1

export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
export CORE_PEER_ADDRESS=localhost:7051

The CORE_PEER_TLS_ROOTCERT_FILE and CORE_PEER_MSPCONFIGPATH environment variables point to the Org1 crypto material in the organizations folder.

Run the following command to initialize the ledger with assets:
peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt" -c '{"function":"InitLedger","Args":[]}'


You can now query the ledger from your CLI. Run the following command to get the list of assets that were added to your channel ledger:

peer chaincode query -C mychannel -n basic -c '{"Args":["GetAllAssets"]}'


notes:Chaincodes are invoked when a network member wants to transfer or change an asset on the ledger.








